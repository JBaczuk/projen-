#!/bin/bash

# Read in user options
read -p "What is the name of your project? " projName
read -p "Bug reporting email/url? " bugAddress
read -p "Boost Unit Tests? yN " boostUnitTests
read -p "CLI? yN " installCli
version=0.0.1
bUT=false;
cli=false;

if [ "$boostUnitTests" = "Y" ] || [ "$boostUnitTests" = "y" ]; then
    bUT=true;
fi
if [ "$installCli" = "Y" ] || [ "$installCli" = "y" ]; then
    cli=false;
fi

eval mkdir -p $projName/src
if [ "$bUT" = true ]; then
    mkdir -p $projName/test
fi
echo "#include <iostream>" >> $projName/src/main.cpp
if [ "$cli" = true ]; then
    echo "#include <boost/program_options.hpp>" >> $projName/src/main.cpp
fi
echo "" >> $projName/src/main.cpp
echo "using namespace std;" >> $projName/src/main.cpp
if [ "$bUT" = true ]; then
    echo "" >> $projName/src/main.cpp
    echo "int testfunc(int a, int b)" >> $projName/src/main.cpp
    echo "{" >> $projName/src/main.cpp
    echo "    return a + b;" >> $projName/src/main.cpp
    echo "}" >> $projName/src/main.cpp
    echo "" >> $projName/src/main.cpp

    echo "#ifndef MAIN_H" >> $projName/src/main.hpp
    echo "#define MAIN_H" >> $projName/src/main.hpp
    echo "" >> $projName/src/main.hpp
    echo "int testfunc(int a, int b);" >> $projName/src/main.hpp
    echo "" >> $projName/src/main.hpp
    echo "#endif" >> $projName/src/main.hpp
    echo "" >> $projName/src/main.hpp

    printf "#define BOOST_AUTO_TEST_MAIN\n#define BOOST_TEST_DYN_LINK\n#include <boost/test/auto_unit_test.hpp>" >> $projName/test/runner.cpp
    printf "#define BOOST_TEST_DYN_LINK\n#include <boost/test/unit_test.hpp>\n#include <main.hpp>\n\nBOOST_AUTO_TEST_SUITE(test_main)\n\n" >> $projName/test/main_tests.cpp
    printf "BOOST_AUTO_TEST_CASE(test_testfunc)\n{\n    BOOST_CHECK_EQUAL(1,1);\n}\n\nBOOST_AUTO_TEST_SUITE_END()" >> $projName/test/main_tests.cpp
fi
echo "int main (int argc, char* argv[])" >> $projName/src/main.cpp
echo "{" >> $projName/src/main.cpp
echo "int answer = testfunc(1,1);" >> $projName/src/main.cpp
echo 'cout << "answer: " << answer << endl;' >> $projName/src/main.cpp
if [ !"$cli" ]; then
    echo '    try {' >> $projName/src/main.cpp
    echo '        string command;' >> $projName/src/main.cpp
    echo '        vector<string> command_params;' >> $projName/src/main.cpp
    echo '        po::options_description desc("Allowed options");' >> $projName/src/main.cpp
    echo '        desc.add_options()' >> $projName/src/main.cpp
    echo '            ("help", "Show this help message")' >> $projName/src/main.cpp
    echo '            ("verbose,v", po::value<int>()->implicit_value(1),' >> $projName/src/main.cpp
    echo '                "Enable verbosity (optionally specify level)")' >> $projName/src/main.cpp
    echo '            ("some_flag,t", po::bool_switch(&some_flag_en)->default_value(false),' >> $projName/src/main.cpp
    echo '                "Use some_flag configuration")' >> $projName/src/main.cpp 
    echo '            ("command", po::value< vector<string> >(), "Command")' >> $projName/src/main.cpp
    echo '        ;\n' >> $projName/src/main.cpp
    echo '        po::positional_options_description p;' >> $projName/src/main.cpp
    echo '        p.add("command", -1);' >> $projName/src/main.cpp
    echo '        po::variables_map vm;' >> $projName/src/main.cpp
    echo '        po::store(po::command_line_parser(argc, argv).' >> $projName/src/main.cpp
    echo '            options(desc).positional(p).run(), vm);' >> $projName/src/main.cpp
    echo '        po::notify(vm);\n' >> $projName/src/main.cpp
    echo '        if (vm.count("help")) {' >> $projName/src/main.cpp
    echo '            std::cout << "Usage: options_description [options]\n";' >> $projName/src/main.cpp
    echo '            std::cout << desc;' >> $projName/src/main.cpp
    echo '            return 0;' >> $projName/src/main.cpp
    echo '        }\n' >> $projName/src/main.cpp
    echo '        if (vm.count("command"))' >> $projName/src/main.cpp
    echo '        {' >> $projName/src/main.cpp
    echo '            auto commands = vm["command"].as<vector<string>>();' >> $projName/src/main.cpp
    echo '            command = commands[0];' >> $projName/src/main.cpp
    echo '            vector<string> command_params_new(commands.begin() + 1, commands.end());' >> $projName/src/main.cpp
    echo '            command_params = command_params_new;' >> $projName/src/main.cpp
    echo '        }\n' >> $projName/src/main.cpp
    echo '        if (vm.count("verbose")) {' >> $projName/src/main.cpp
    echo '            std::cout << "Verbosity enabled.  Level is " << vm["verbose"].as<int>() << "\n";' >> $projName/src/main.cpp
    echo '        {\n' >> $projName/src/main.cpp
    echo '        // Command Handler' >> $projName/src/main.cpp
    echo '        if(command == "help")' >> $projName/src/main.cpp
    echo '            std::cout << "Usage: options_description [options]\n";' >> $projName/src/main.cpp
    echo '            std::cout << desc;' >> $projName/src/main.cpp
    echo '            return 0;' >> $projName/src/main.cpp
    echo '        }\n' >> $projName/src/main.cpp
    echo '        else' >> $projName/src/main.cpp
    echo '        {' >> $projName/src/main.cpp
    echo '            std::cout << "Invalid command." << endl;' >> $projName/src/main.cpp
    echo '            std::cout << "Usage: options_description [options]\n";' >> $projName/src/main.cpp
    echo '            std::cout << desc;' >> $projName/src/main.cpp
    echo '        }\n' >> $projName/src/main.cpp
    echo '    }' >> $projName/src/main.cpp
    echo '    catch(std::exception& e)' >> $projName/src/main.cpp
    echo '    {' >> $projName/src/main.cpp
    echo '        std::cout << e.what() << "\n";' >> $projName/src/main.cpp
    echo '        return 1;' >> $projName/src/main.cpp
    echo '    }\n' >> $projName/src/main.cpp
    echo '' >> $projName/src/main.cpp
fi
echo "    return 0;" >> $projName/src/main.cpp
echo "}\n" >> $projName/src/main.cpp

echo "see README.md" >> $projName/README
echo "# $projName" >> $projName/README.md
echo "" >> $projName/README.md
echo "## Installation" >> $projName/README.md
echo "\`\`\`" >> $projName/README.md
echo "$ ./autogen.sh" >> $projName/README.md
echo "$ ./configure" >> $projName/README.md
echo "$ make" >> $projName/README.md
echo "$ sudo make install" >> $projName/README.md
if [ "$bUT" = true ]; then
    echo "$ make check" >> $projName/README.md
fi
echo "\`\`\`" >> $projName/README.md
touch $projName/NEWS
touch $projName/AUTHORS
touch $projName/ChangeLog

echo "AUTOMAKE_OPTIONS = gnu" >> $projName/Makefile.am
if [ "$bUT" = true ]; then
    echo "SUBDIRS = src test" >> $projName/Makefile.am
    echo "TESTS = test/${projName}_tests" >> $projName/Makefile.am

    # this doesn't link boost libraries as expected
    printf "check_PROGRAMS = ${projName}_tests\n${projName}_tests_CPPFLAGS = -I../src/ \${BOOST_CPPFLAGS}\n" >> $projName/test/Makefile.am
    printf "${projName}_tests_LDFLAGS = \${BOOST_LDFLAGS}\n${projName}_tests_LDADD = \${BOOST_UNIT_TEST_FRAMEWORK_LIB}\n" >> $projName/test/Makefile.am
    printf "${projName}_tests_SOURCES = runner.cpp main_tests.cpp" >> $projName/test/Makefile.am
else
    echo "SUBDIRS = src" >> $projName/Makefile.am
fi
echo "bin_PROGRAMS = $projName" >> $projName/src/Makefile.am
echo "${projName}_SOURCES = main.cpp" >> $projName/src/Makefile.am
if [ "$cli" ]; then
    # TODO: update with -lboost_program_options if requested
    echo "${projName}_CPPFLAGS = \${${projName}_BUILD_CPPFLAGS}" >> $projName/src/Makefile.am
    echo "${projName}_LDADD = \${${projName}_LIBS} \${BOOST_SYSTEM_LIBS} \${BOOST_PROGRAM_OPTIONS_LIBS}" >> $projName/src/Makefile.am
fi

echo "--------------------------"
echo "Project $projName created."
echo ""
echo "Configuring autotools build..."

# TODO: update configure.ac to reflect example project
eval cd $projName
autoscan &>/dev/null
mv configure.scan configure.ac
sed -i "/AC_INIT(\[FULL-PACKAGE-NAME\], \[VERSION\], \[BUG-REPORT-ADDRESS\])/a AM_INIT_AUTOMAKE" configure.ac
sed -i -e "s/FULL-PACKAGE-NAME/$projName/g" configure.ac
sed -i -e "s/VERSION/$version/g" configure.ac
sed -i -e "s/BUG-REPORT-ADDRESS/$bugAddress/g" configure.ac

if [ "$bUT" = true ]; then
    sed -i "/AC_CONFIG_HEADERS/a \n# Specify the directory of additional local Autoconf macros.\nAC_CONFIG_MACRO_DIR([m4])\n" configure.ac
    sed -i "/AC_CONFIG_MACRO_DIR/a \n# Require c++11 for all c++ products.\nAS_CASE([${CC}], [*],\n    [AX_CHECK_COMPILE_FLAG([-std=c++11],\n[CXXFLAGS="$CXXFLAGS -std=c++11"])])" configure.ac
    sed -i "/# Checks for libraries./a AX_BOOST_BASE([1.47.0])\nAX_BOOST_UNIT_TEST_FRAMEWORK\n" configure.ac
    if [ "$cli" = true ]; then
        sed -i "/AX_BOOST_UNIT_TEST_FRAMEWORK/a AX_BOOST_PROGRAM_OPTIONS\n" configure.ac
    fi
    eval mkdir m4
    wget https://raw.githubusercontent.com/JBaczuk/btc_wallet/70e83a713bb7ede296191f6855a8e364286200c1/m4/ax_boost_base.m4 -P m4/
    wget https://raw.githubusercontent.com/JBaczuk/btc_wallet/70e83a713bb7ede296191f6855a8e364286200c1/m4/ax_boost_unit_test_framework.m4 -P m4/
fi

echo "#!/bin/bash" >> autogen.sh
printf "aclocal\nautoreconf -i" >> autogen.sh
chmod +x autogen.sh
./autogen.sh

echo ""
echo "-----------------------"
echo "Configuration complete."
echo ""
echo "Instructions for installation:"
echo "$ cd $projName"
echo "$ ./configure"
echo "$ make"
echo "$ sudo make install"
